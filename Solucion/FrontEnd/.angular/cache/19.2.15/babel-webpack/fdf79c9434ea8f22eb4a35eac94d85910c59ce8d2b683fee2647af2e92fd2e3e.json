{"ast":null,"code":"import { map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7047/Api/v2/Products';\n  }\n  getAll() {\n    return this.http.get(this.apiUrl).pipe(tap(res => {\n      console.log('ðŸ“¥ JSON recibido desde API:', res);\n    }), map(products => (products || []).map(p => ({\n      ...p,\n      productCategories: (p.productCategories || []).filter(pc => pc !== null).map(pc => ({\n        ...pc,\n        product: null,\n        // ðŸ”´ evitar ciclos\n        category: pc?.category ? {\n          ...pc.category,\n          productCategories: [] // ðŸ”´ vaciamos para no traer nulls\n        } : null\n      }))\n    }))));\n  }\n  getById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(p => ({\n      ...p,\n      productCategories: (p.productCategories || []).filter(pc => pc !== null).map(pc => ({\n        ...pc,\n        product: null,\n        category: pc?.category ? {\n          ...pc.category,\n          productCategories: []\n        } : null\n      }))\n    })));\n  }\n  create(product) {\n    const dto = {\n      productID: product.productID,\n      name: product.name,\n      description: product.description,\n      image: product.image,\n      categoryIDs: product.productCategories.map(pc => pc.categoryID)\n    };\n    return this.http.post(this.apiUrl, dto);\n  }\n  update(id, product) {\n    const dto = {\n      productID: product.productID,\n      name: product.name,\n      description: product.description,\n      image: product.image,\n      categoryIDs: product.productCategories.map(pc => pc.categoryID)\n    };\n    return this.http.put(`${this.apiUrl}/${id}`, dto);\n  }\n  delete(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.Éµfac = function ProductsService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProductsService)(i0.ÉµÉµinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: ProductsService,\n      factory: ProductsService.Éµfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","tap","ProductsService","constructor","http","apiUrl","getAll","get","pipe","res","console","log","products","p","productCategories","filter","pc","product","category","getById","id","create","dto","productID","name","description","image","categoryIDs","categoryID","post","update","put","delete","i0","ÉµÉµinject","i1","HttpClient","factory","Éµfac","providedIn"],"sources":["C:\\Users\\sebastian\\Desktop\\Prueba\\Challenge\\Solucion\\FrontEnd\\src\\app\\services\\products.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, tap } from 'rxjs';\nimport { Product } from '../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  private apiUrl = 'https://localhost:7047/Api/v2/Products';\n\n  constructor(private http: HttpClient) {}\n\ngetAll(): Observable<Product[]> {\n  return this.http.get<Product[]>(this.apiUrl).pipe(\n    tap(res => {\n        console.log('ðŸ“¥ JSON recibido desde API:', res);\n      }),\n    map(products =>\n      (products || []).map(p => ({\n        ...p,\n        productCategories: (p.productCategories || [])\n          .filter(pc => pc !== null)\n          .map(pc => ({\n            ...pc!,\n            product: null, // ðŸ”´ evitar ciclos\n            category: pc?.category\n              ? {\n                  ...pc.category,\n                  productCategories: [] // ðŸ”´ vaciamos para no traer nulls\n                }\n              : null\n          }))\n      }))\n    )\n  );\n}\n\ngetById(id: number): Observable<Product> {\n  return this.http.get<Product>(`${this.apiUrl}/${id}`).pipe(\n    map(p => ({\n      ...p,\n      productCategories: (p.productCategories || [])\n        .filter(pc => pc !== null)\n        .map(pc => ({\n          ...pc!,\n          product: null,\n          category: pc?.category\n            ? {\n                ...pc.category,\n                productCategories: []\n              }\n            : null\n        }))\n    }))\n  );\n}\n\n create(product: Product): Observable<Product> {\n  const dto = {\n    productID: product.productID,\n    name: product.name,\n    description: product.description,\n    image: product.image,\n    categoryIDs: product.productCategories.map(pc => pc.categoryID)\n  };\n\n  return this.http.post<Product>(this.apiUrl, dto);\n}\n\n  update(id: number, product: Product): Observable<void> {\n    const dto = {\n    productID: product.productID,\n    name: product.name,\n    description: product.description,\n    image: product.image,\n    categoryIDs: product.productCategories.map(pc => pc.categoryID)\n  };\n  \n    return this.http.put<void>(`${this.apiUrl}/${id}`, dto);\n  }\n\n  delete(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}